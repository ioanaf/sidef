#! /usr/bin/ruby

const s = Set(1, 2, 3)
const collector = []
3.times{
  var (f, r) = (s.first_rest)
  assert_eq(2, r.len)
  collector << (f, r...)
  assert(f ~~ [1, 2, 3])
  assert(f !~ r)
}
# Original set is unchanged
assert_eq(s, Set(1, 2, 3))
assert_eq(collector.flatten.sort, ([1] * 3) + ([2] * 3) + ([3] * 3))
assert_eq(collector.sum, 9 * 2)

var counter = 0
const orig_set = Set( 0..10 -> ... )
assert_eq( true, {
  if (_) {
    var (f, r) = .first_rest
    counter += f
    __BLOCK__(r)
  } else { true }
}(orig_set) )

# Ensure original set was not changed
assert_eq(orig_set, Set(0..10 -> ...))
assert_eq(counter, 0..10 -> sum)

say "** Test passed!"
