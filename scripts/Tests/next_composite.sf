#!/usr/bin/ruby

do {
    var p = (2**127 - 1)

    for k in (-100 .. 100) {
        var t = next_composite(p+k)
        assert(t.is_composite)
    }
}

do {
    var p = 4171

    for k in (-100 .. 100) {
        var t = next_composite(p+k)
        assert(t.is_composite)
    }
}

do {
    var n = 0
    var arr = []
    20.of {
        arr << (n = next_composite(n))
    }
    assert_eq(arr, {.is_composite}.first(20))
}

assert_eq(composite_count(1, 100), composite_count(100))
assert_eq(composite_count(0, 100), 74)
assert_eq(composite_count(0, 101), 74)
assert_eq(composite_count(3, 100), 74)
assert_eq(composite_count(4, 100), 74)
assert_eq(composite_count(4, 101), 74)
assert_eq(composite_count(5, 100), 73)
assert_eq(composite_count(6, 100), 73)
assert_eq(composite_count(6, 101), 73)
assert_eq(composite_count(7, 101), 72)

assert_eq(composite_count(123, 1234), 123..1234 -> count { .is_composite })
assert_eq(composite_count(1234, 12345), 1234..12345 -> count { .is_composite })

assert_eq(n_composites(10),    [4, 6, 8, 9, 10, 12, 14, 15, 16, 18])
assert_eq(n_composites(5, 50), [50, 51, 52, 54, 55])
assert_eq(n_composites(5, 53), [54, 55, 56, 57, 58])

say "** Test passed!"
