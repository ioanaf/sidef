#!/usr/bin/ruby

var arr_test = [["x", "y", "z"]];

arr_test[0][1]->say;
arr_test[0][-1]->say;

arr_test[1] = "x";
arr_test->to_s->say;

arr_test[0][0,2]->to_s->say;

var ref_slice = [arr_test[0,1,2]];
ref_slice[0,1,2,3] = ("hu","hi","hei","no");

ref_slice.to_s.say;
arr_test->to_s.say;

arr_test->len->to_s->say;

["zzzz","ioana"][1]->say;
[[["zzz","trizen","zzz"]]][0][0][1]->say;

#
## Test `nil` return-values
#

var a = [4, 8, 10, 12]
var r = [a.first_by { .is_odd }, a.last_by { .is_odd }]

assert_eq(r.len, 2)
assert_eq(r, [nil, nil])

# Rest, last and first
assert_eq(a.first(0), [])
assert_eq(a.first, 4)
assert_eq(a.first(2), [4, 8])
assert_eq(a.first(4), a)
assert_eq(a.first(5), a)

assert_eq(a.last(0), [])
assert_eq(a.last, 12)
assert_eq(a.last(2), [10, 12])
assert_eq(a.last(5), a)

assert_eq(a.rest(-2), [8, 10, 12])
assert_eq(a.rest, [8, 10, 12])
assert_eq(a.rest(2), [10, 12])
assert_eq(a.rest(3), [12])
assert_eq(a.rest(4), [])
assert_eq(a.rest(5), [8, 10, 12])
assert_eq(a.rest(6), [8, 10, 12])

assert_eq(a, [4, 8, 10, 12])

say "** Test passed!"
