#!/usr/bin/ruby

# Tests for the "Quaternion" class.

# Integers (a,b) such that a^2 - a*b + b^2 give the powers of 7.
with (Quaternion(1,2,3,4)) {|q|
    assert_eq(15.of { q.pow(_).a }, [1, 1, -28, -86, 668, 3916, -12208, -141896, 82448, 4421776, 6370112, -119913056, -430929472, 2735532736, 18398949632])
    assert_eq(15.of { q.pow(_).b }, [0, 2, 4, -52, -224, 1112, 8944, -15472, -299264, -134368, 8709184, 21449408, -218376704, -1080235648, 4390829824])
    assert_eq(15.of { q.pow(_).c }, [0, 3, 6, -78, -336, 1668, 13416, -23208, -448896, -201552, 13063776, 32174112, -327565056, -1620353472, 6586244736])
    assert_eq(15.of { q.pow(_).d }, [0, 4, 8, -104, -448, 2224, 17888, -30944, -598528, -268736, 17418368, 42898816, -436753408, -2160471296, 8781659648])
}

var n = lcm(1..20)
var m = (2**64 + 1)

with (Quaternion(2,3,4,5)) {|q|
    var r = q.powmod(n, m)
    assert_eq(gcd(r.b, m), 274177)
    assert_eq(gcd(r.c, m), 274177)
    assert_eq(gcd(r.d, m), 274177)
}

func quaternion_primality_test(n, tries = 3) {

    var (
        a = (tries + 1),
        b = (tries + 2),
        c = (tries + 3),
        d = (tries + 4),
    )

    if (n <= d) {
        return n.is_prime
    }

    var z = Quaternion(a,b,c,d)
    var r = z.powmod(n,n)

    (
        (r == z) ||
        (r == Quaternion(a)) ||
        (r == Quaternion(a, n-b, n-c, n-d))
    ) && (
        (tries > 0) ? __FUNC__(n, tries-1) : true
    )
}

assert_eq(25.by(quaternion_primality_test), 100.primes)

do {
    var a = Quaternion(3,4,5,6)
    var b = Quaternion(9,13,17,23)

    assert_eq(a/b * b, a)
    assert_eq(a*b / b, a)

    assert_eq(b/a * a, b)
    assert_eq(b*a / a, b)
}

do {
    var q  = Quaternion(1, 2, 3, 4)
    var q1 = Quaternion(2, 3, 4, 5)
    var q2 = Quaternion(3, 4, 5, 6)
    var r  = 7

    assert_eq(q.norm, 30)
    assert_eq(q.abs, 30.sqrt)
    assert_eq(-q, Quaternion(-q.a, -q.b, -q.c, -q.d))
    assert_eq(q.conj, Quaternion(q.a, -q.b, -q.c, -q.d))
    assert_eq(q + r, Quaternion(q.a+r, q.b, q.c, q.d))
    assert_eq(q - r, Quaternion(q.a-r, q.b, q.c, q.d))
    assert_eq(q1 + q2, Quaternion(q1.a+q2.a, q1.b+q2.b, q1.c+q2.c, q1.d+q2.d))
    assert_eq(q1 - q2, Quaternion(q1.a-q2.a, q1.b-q2.b, q1.c-q2.c, q1.d-q2.d))
    assert_eq(q * r, Quaternion(q.a*r, q.b*r, q.c*r, q.d*r))

    assert_eq(q1 * q2, Quaternion(-56, 16, 24, 26))
    assert_eq(q2 * q1, Quaternion(-56, 18, 20, 28))

    assert_eq(r*q1, q1*r)
    assert_eq(r+q1, q1+r)
    assert_eq(r-q1, Quaternion(r)-q1)
    assert_eq(r/q1, Quaternion(r)/q1)

    assert_ne(q1*q2, q2*q1)
    assert_ne(q2*q1, q1*q2)

    assert_eq(q1.invmod(43), q1.powmod(-1, 43))
    assert_eq(1/q1, q1.inv)

    assert_eq(powmod(q1, -10, 43), powmod(q1, 10, 43).invmod(43))
    assert_eq(powmod(q1, -10, 43), powmod(q1.invmod(43), 10, 43))

    assert_eq(powmod(q2, -11, 97), powmod(q2, 11, 97).invmod(97))
    assert_eq(powmod(q2, -11, 97), powmod(q2.invmod(97), 11, 97))

    assert_eq(q1**-1, 1/q1)
    assert_eq(q1**0, 1)
    assert_eq(q1**1, q1)
    assert_eq(q1**2, q1*q1)
    assert_eq(q1**3, q1*q1*q1)

    assert_eq(q1**-3, 1/(q1*q1*q1))
    assert_eq(q1**-3, (1/q1)**3)
}

do {
    func b(n) is cached {
        return 1 if (n <= 1)
        b(n-1) + b(n-2)*Quaternion(0, 1/sqrt(3), 1/sqrt(3), 1/sqrt(3))
    }

    # OEIS: A105309
    assert_eq(20.of { b(_).abs**2 -> round }, [1, 1, 2, 5, 9, 20, 41, 85, 178, 369, 769, 1600, 3329, 6929, 14418, 30005, 62441, 129940, 270409, 562725])
}

say "** Test passed!"
