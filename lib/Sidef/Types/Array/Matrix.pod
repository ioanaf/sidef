
=encoding utf8

=head1 NAME

Sidef::Types::Array::Matrix

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Matrix(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Types::Array::Array

=head1 METHODS

=head2 %

I<Obj> B<%> I<Obj> -> I<Obj>

Return the

Aliases: I<mod>

=cut

=head2 &

I<Obj> B<&> I<Obj> -> I<Obj>

Return the

Aliases: I<and>

=cut

=head2 *

I<Obj> B<*> I<Obj> -> I<Obj>

Return the

Aliases: I<mul>

=cut

=head2 **

I<Obj> B<**> I<Obj> -> I<Obj>

Return the

Aliases: I<pow>

=cut

=head2 +

I<Obj> B<+> I<Obj> -> I<Obj>

Return the

Aliases: I<add>

=cut

=head2 -

I<Obj> B<-> I<Obj> -> I<Obj>

Return the

Aliases: I<sub>

=cut

=head2 /

I<Obj> B</> I<Obj> -> I<Obj>

Return the

Aliases: I<รท>, I<div>

=cut

=head2 ^

I<Obj> B<^> I<Obj> -> I<Obj>

Return the

Aliases: I<xor>

=cut

=head2 I

Matrix.I() -> I<Obj>

Return the

Aliases: I<identity>

=cut

=head2 |

I<Obj> B<|> I<Obj> -> I<Obj>

Return the

Aliases: I<or>

=cut

=head2 abs

Matrix.abs() -> I<Obj>

Return the

=cut

=head2 anti_diagonal

Matrix.anti_diagonal() -> I<Obj>

Return the

=cut

=head2 build

Matrix.build() -> I<Obj>

Return the

=cut

=head2 ceil

Matrix.ceil() -> I<Obj>

Return the

=cut

=head2 col

Matrix.col() -> I<Obj>

Return the

Aliases: I<column>, I<get_column>

=cut

=head2 col_len

Matrix.col_len() -> I<Obj>

Return the

Aliases: I<col_size>, I<col_count>, I<column_len>, I<column_size>, I<column_count>

=cut

=head2 cols

Matrix.cols() -> I<Obj>

Return the

Aliases: I<columns>, I<from_cols>, I<from_columns>

=cut

=head2 col_vector

Matrix.col_vector() -> I<Obj>

Return the

Aliases: I<column_vector>

=cut

=head2 concat

Matrix.concat() -> I<Obj>

Return the

=cut

=head2 det

Matrix.det() -> I<Obj>

Return the

Aliases: I<determinant>

=cut

=head2 det_bareiss

Matrix.det_bareiss() -> I<Obj>

Return the

=cut

=head2 diagonal

Matrix.diagonal() -> I<Obj>

Return the

=cut

=head2 flip

Matrix.flip() -> I<Obj>

Return the

=cut

=head2 floor

Matrix.floor() -> I<Obj>

Return the

=cut

=head2 gauss_jordan_invert

Matrix.gauss_jordan_invert() -> I<Obj>

Return the

=cut

=head2 gauss_jordan_solve

Matrix.gauss_jordan_solve() -> I<Obj>

Return the

=cut

=head2 horizontal_flip

Matrix.horizontal_flip() -> I<Obj>

Return the

=cut

=head2 inv

Matrix.inv() -> I<Obj>

Return the

Aliases: I<invert>, I<inverse>

=cut

=head2 invmod

Matrix.invmod() -> I<Obj>

Return the

=cut

=head2 is_square

Matrix.is_square() -> I<Obj>

Return the

=cut

=head2 neg

Matrix.neg() -> I<Obj>

Return the

=cut

=head2 new

Matrix.new() -> I<Obj>

Return the

Aliases: I<call>

=cut

=head2 powmod

Matrix.powmod() -> I<Obj>

Return the

=cut

=head2 prod

Matrix.prod() -> I<Obj>

Return the

Aliases: I<prod_by>

=cut

=head2 rand

Matrix.rand() -> I<Obj>

Return the

=cut

=head2 row

Matrix.row() -> I<Obj>

Return the

Aliases: I<get_row>

=cut

=head2 row_len

Matrix.row_len() -> I<Obj>

Return the

Aliases: I<row_size>, I<row_count>

=cut

=head2 rows

Matrix.rows() -> I<Obj>

Return the

Aliases: I<from_rows>

=cut

=head2 row_vector

Matrix.row_vector() -> I<Obj>

Return the

=cut

=head2 rref

Matrix.rref() -> I<Obj>

Return the

Aliases: I<reduced_row_echelon_form>

=cut

=head2 scalar

Matrix.scalar() -> I<Obj>

Return the

=cut

=head2 set_col

Matrix.set_col() -> I<Obj>

Return the

Aliases: I<set_column>

=cut

=head2 set_row

Matrix.set_row() -> I<Obj>

Return the

=cut

=head2 size

Matrix.size() -> I<Obj>

Return the

=cut

=head2 solve

Matrix.solve() -> I<Obj>

Return the

=cut

=head2 sum

Matrix.sum() -> I<Obj>

Return the

Aliases: I<sum_by>

=cut

=head2 t

Matrix.t() -> I<Obj>

Return the

Aliases: I<not>, I<transpose>

=cut

=head2 to_a

Matrix.to_a() -> I<Obj>

Return the

Aliases: I<to_array>

=cut

=head2 to_s

Matrix.to_s() -> I<Obj>

Return the

Aliases: I<dump>, I<to_str>

=cut

=head2 vec_cols

Matrix.vec_cols() -> I<Obj>

Return the

Aliases: I<vec_columns>, I<vector_columns>

=cut

=head2 vec_rows

Matrix.vec_rows() -> I<Obj>

Return the

Aliases: I<vector_rows>

=cut

=head2 vertical_flip

Matrix.vertical_flip() -> I<Obj>

Return the

=cut

=head2 zero

Matrix.zero() -> I<Obj>

Return the

=cut
