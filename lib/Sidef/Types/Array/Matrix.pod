
=encoding utf8

=head1 NAME

Sidef::Types::Array::Matrix

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Matrix(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Types::Array::Array

=head1 METHODS

=head2 %

    I<Obj> B<%> I<Obj>

Return the

Aliases: I<mod>

=cut

=head2 &

    I<Obj> B<&> I<Obj>

Return the

Aliases: I<and>

=cut

=head2 *

    I<Obj> B<*> I<Obj>

Return the

Aliases: I<mul>

=cut

=head2 **

    I<Obj> B<**> I<Obj>

Return the

Aliases: I<pow>

=cut

=head2 +

    I<Obj> B<+> I<Obj>

Return the

Aliases: I<add>

=cut

=head2 -

    I<Obj> B<-> I<Obj>

Return the

Aliases: I<sub>

=cut

=head2 /

    I<Obj> B</> I<Obj>

Return the

Aliases: I<รท>, I<div>

=cut

=head2 ^

    I<Obj> B<^> I<Obj>

Return the

Aliases: I<xor>

=cut

=head2 I

    Matrix.I()

Return the

Aliases: I<identity>

=cut

=head2 |

    I<Obj> B<|> I<Obj>

Return the

Aliases: I<or>

=cut

=head2 abs

    Matrix.abs()

Return the

=cut

=head2 anti_diagonal

    Matrix.anti_diagonal()

Return the

=cut

=head2 build

    Matrix.build()

Return the

=cut

=head2 ceil

    Matrix.ceil()

Return the

=cut

=head2 col

    Matrix.col()

Return the

Aliases: I<column>, I<get_column>

=cut

=head2 col_len

    Matrix.col_len()

Return the

Aliases: I<col_size>, I<col_count>, I<column_len>, I<column_size>, I<column_count>

=cut

=head2 cols

    Matrix.cols()

Return the

Aliases: I<columns>, I<from_cols>, I<from_columns>

=cut

=head2 col_vector

    Matrix.col_vector()

Return the

Aliases: I<column_vector>

=cut

=head2 concat

    Matrix.concat()

Return the

=cut

=head2 det

    Matrix.det()

Return the

Aliases: I<determinant>

=cut

=head2 det_bareiss

    Matrix.det_bareiss()

Return the

=cut

=head2 diagonal

    Matrix.diagonal()

Return the

=cut

=head2 flip

    Matrix.flip()

Return the

=cut

=head2 floor

    Matrix.floor()

Return the

=cut

=head2 gauss_jordan_invert

    Matrix.gauss_jordan_invert()

Return the

=cut

=head2 gauss_jordan_solve

    Matrix.gauss_jordan_solve()

Return the

=cut

=head2 horizontal_flip

    Matrix.horizontal_flip()

Return the

=cut

=head2 inv

    Matrix.inv()

Return the

Aliases: I<invert>, I<inverse>

=cut

=head2 invmod

    Matrix.invmod()

Return the

=cut

=head2 is_square

    Matrix.is_square()

Return the

=cut

=head2 neg

    Matrix.neg()

Return the

=cut

=head2 new

    Matrix.new()

Return the

Aliases: I<call>

=cut

=head2 powmod

    Matrix.powmod()

Return the

=cut

=head2 prod

    Matrix.prod()

Return the

Aliases: I<prod_by>

=cut

=head2 rand

    Matrix.rand()

Return the

=cut

=head2 row

    Matrix.row()

Return the

Aliases: I<get_row>

=cut

=head2 row_len

    Matrix.row_len()

Return the

Aliases: I<row_size>, I<row_count>

=cut

=head2 rows

    Matrix.rows()

Return the

Aliases: I<from_rows>

=cut

=head2 row_vector

    Matrix.row_vector()

Return the

=cut

=head2 rref

    Matrix.rref()

Return the

Aliases: I<reduced_row_echelon_form>

=cut

=head2 scalar

    Matrix.scalar()

Return the

=cut

=head2 set_col

    Matrix.set_col()

Return the

Aliases: I<set_column>

=cut

=head2 set_row

    Matrix.set_row()

Return the

=cut

=head2 size

    Matrix.size()

Return the

=cut

=head2 solve

    Matrix.solve()

Return the

=cut

=head2 sum

    Matrix.sum()

Return the

Aliases: I<sum_by>

=cut

=head2 t

    Matrix.t()

Return the

Aliases: I<not>, I<transpose>

=cut

=head2 to_a

    Matrix.to_a()

Return the

Aliases: I<to_array>

=cut

=head2 to_s

    Matrix.to_s()

Return the

Aliases: I<dump>, I<to_str>

=cut

=head2 vec_cols

    Matrix.vec_cols()

Return the

Aliases: I<vec_columns>, I<vector_columns>

=cut

=head2 vec_rows

    Matrix.vec_rows()

Return the

Aliases: I<vector_rows>

=cut

=head2 vertical_flip

    Matrix.vertical_flip()

Return the

=cut

=head2 zero

    Matrix.zero()

Return the

=cut
