
=encoding utf8

=head1 NAME

Sidef::Types::Array::Array

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Array(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Object::Object

=head1 METHODS

=head2 &

I<Obj> B<&> I<Obj> -> I<Obj>

Return the

Aliases: I<and>

=cut

=head2 *

I<Obj> B<*> I<Obj> -> I<Obj>

Return the

Aliases: I<mul>

=cut

=head2 **

I<Obj> B<**> I<Obj> -> I<Obj>

Return the

Aliases: I<mpow>, I<matrix_pow>

=cut

=head2 +

I<Obj> B<+> I<Obj> -> I<Obj>

Return the

Aliases: I<add>, I<concat>

=cut

=head2 -

I<Obj> B<-> I<Obj> -> I<Obj>

Return the

Aliases: I<sub>, I<diff>

=cut

=head2 ...

I<Obj> B<...> I<Obj> -> I<Obj>

Return the

Aliases: I<to_list>

=cut

=head2 /

I<Obj> B</> I<Obj> -> I<Obj>

Return the

Aliases: I<÷>, I<div>

=cut

=head2 <

I<Obj> B<E<lt>> I<Obj> -> I<Obj>

Return the

Aliases: I<lt>

=cut

=head2 <=>

I<Obj> B<E<lt>=E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<cmp>

=cut

=head2 ==

I<Obj> B<==> I<Obj> -> I<Obj>

Return the

Aliases: I<eq>

=cut

=head2 >

I<Obj> B<E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<gt>

=cut

=head2 ^

I<Obj> B<^> I<Obj> -> I<Obj>

Return the

Aliases: I<xor>

=cut

=head2 |

I<Obj> B<|> I<Obj> -> I<Obj>

Return the

Aliases: I<or>

=cut

=head2 |>>

I<Obj> B<|E<gt>E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<pipeline_map_op>

=cut

=head2 |X>

Array.|XE<gt>() -> I<Obj>

Return the

Aliases: I<pipeline_cross_op>

=cut

=head2 |Z>

Array.|ZE<gt>() -> I<Obj>

Return the

Aliases: I<pipeline_zip_op>

=cut

=head2 «

I<Obj> B<«> I<Obj> -> I<Obj>

Return the

Aliases: I<E<lt>E<lt>>, I<push>, I<append>

=cut

=head2 »

I<Obj> B<»> I<Obj> -> I<Obj>

Return the

Aliases: I<E<gt>E<gt>>, I<pop>, I<drop_last>, I<drop_right>

=cut

=head2 ∋

I<Obj> B<∋> I<Obj> -> I<Obj>

Return the

Aliases: I<has>, I<contain>, I<include>, I<contains>, I<includes>

=cut

=head2 ∌

I<Obj> B<∌> I<Obj> -> I<Obj>

Return the

=cut

=head2 ≠

I<Obj> B<≠> I<Obj> -> I<Obj>

Return the

Aliases: I<!=>, I<ne>

=cut

=head2 ≤

I<Obj> B<≤> I<Obj> -> I<Obj>

Return the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

I<Obj> B<≥> I<Obj> -> I<Obj>

Return the

Aliases: I<E<gt>=>, I<ge>

=cut

=head2 abbrev

Array.abbrev() -> I<Obj>

Return the

Aliases: I<abbreviations>

=cut

=head2 accumulate

Array.accumulate() -> I<Obj>

Return the

=cut

=head2 accumulate_by

Array.accumulate_by() -> I<Obj>

Return the

=cut

=head2 all

Array.all() -> I<Obj>

Return the

=cut

=head2 all_composite

Array.all_composite() -> I<Obj>

Return the

=cut

=head2 all_prime

Array.all_prime() -> I<Obj>

Return the

=cut

=head2 any

Array.any() -> I<Obj>

Return the

=cut

=head2 avg

Array.avg() -> I<Obj>

Return the

=cut

=head2 avg_by

Array.avg_by() -> I<Obj>

Return the

=cut

=head2 bindex

Array.bindex() -> I<Obj>

Return the

Aliases: I<bsearch_index>

=cut

=head2 bindex_by

Array.bindex_by() -> I<Obj>

Return the

Aliases: I<bsearch_index_by>

=cut

=head2 bindex_ge

Array.bindex_ge() -> I<Obj>

Return the

=cut

=head2 bindex_ge_by

Array.bindex_ge_by() -> I<Obj>

Return the

=cut

=head2 bindex_le

Array.bindex_le() -> I<Obj>

Return the

=cut

=head2 bindex_le_by

Array.bindex_le_by() -> I<Obj>

Return the

=cut

=head2 binsert

Array.binsert() -> I<Obj>

Return the

=cut

=head2 bsearch

Array.bsearch() -> I<Obj>

Return the

Aliases: I<bsearch_by>

=cut

=head2 bsearch_ge

Array.bsearch_ge() -> I<Obj>

Return the

Aliases: I<bsearch_ge_by>

=cut

=head2 bsearch_le

Array.bsearch_le() -> I<Obj>

Return the

Aliases: I<bsearch_le_by>

=cut

=head2 bshuffle

Array.bshuffle() -> I<Obj>

Return the

Aliases: I<best_shuffle>

=cut

=head2 cartesian

Array.cartesian() -> I<Obj>

Return the

=cut

=head2 cfrac2num

Array.cfrac2num() -> I<Obj>

Return the

=cut

=head2 change_to

Array.change_to() -> I<Obj>

Return the

=cut

=head2 chrs

Array.chrs() -> I<Obj>

Return the

Aliases: I<decode>, I<join_bytes>

=cut

=head2 circular_permutations

Array.circular_permutations() -> I<Obj>

Return the

=cut

=head2 clear

Array.clear() -> I<Obj>

Return the

=cut

=head2 collapse

Array.collapse() -> I<Obj>

Return the

=cut

=head2 combinations

Array.combinations() -> I<Obj>

Return the

=cut

=head2 combinations_with_repetition

Array.combinations_with_repetition() -> I<Obj>

Return the

=cut

=head2 combine

Array.combine() -> I<Obj>

Return the

=cut

=head2 compact

Array.compact() -> I<Obj>

Return the

=cut

=head2 cons

Array.cons() -> I<Obj>

Return the

=cut

=head2 contains_all

Array.contains_all() -> I<Obj>

Return the

=cut

=head2 contains_any

Array.contains_any() -> I<Obj>

Return the

=cut

=head2 contains_type

Array.contains_type() -> I<Obj>

Return the

=cut

=head2 count

Array.count() -> I<Obj>

Return the

=cut

=head2 count_by

Array.count_by() -> I<Obj>

Return the

=cut

=head2 cross_op

Array.cross_op() -> I<Obj>

Return the

Aliases: I<cross_operator>

=cut

=head2 defined

Array.defined() -> I<Obj>

Return the

=cut

=head2 delete

Array.delete() -> I<Obj>

Return the

Aliases: I<remove>

=cut

=head2 delete_by

Array.delete_by() -> I<Obj>

Return the

Aliases: I<delete_if>, I<remove_by>, I<remove_if>

=cut

=head2 delete_first

Array.delete_first() -> I<Obj>

Return the

Aliases: I<remove_first>

=cut

=head2 delete_first_by

Array.delete_first_by() -> I<Obj>

Return the

Aliases: I<delete_first_if>, I<remove_first_by>, I<remove_first_if>

=cut

=head2 delete_last

Array.delete_last() -> I<Obj>

Return the

Aliases: I<remove_last>

=cut

=head2 delete_last_by

Array.delete_last_by() -> I<Obj>

Return the

Aliases: I<delete_last_if>, I<remove_last_by>, I<remove_last_if>

=cut

=head2 derangements

Array.derangements() -> I<Obj>

Return the

Aliases: I<complete_permutations>

=cut

=head2 det

Array.det() -> I<Obj>

Return the

Aliases: I<determinant>

=cut

=head2 det_bareiss

Array.det_bareiss() -> I<Obj>

Return the

=cut

=head2 dig

Array.dig() -> I<Obj>

Return the

=cut

=head2 digits2num

Array.digits2num() -> I<Obj>

Return the

=cut

=head2 each_2d

Array.each_2d() -> I<Obj>

Return the

=cut

=head2 each_cons

Array.each_cons() -> I<Obj>

Return the

=cut

=head2 each_k

Array.each_k() -> I<Obj>

Return the

Aliases: I<each_key>, I<each_index>

=cut

=head2 each_kv

Array.each_kv() -> I<Obj>

Return the

=cut

=head2 each_slice

Array.each_slice() -> I<Obj>

Return the

=cut

=head2 end

Array.end() -> I<Obj>

Return the

Aliases: I<offset>

=cut

=head2 exists

Array.exists() -> I<Obj>

Return the

Aliases: I<has_index>

=cut

=head2 expand

Array.expand() -> I<Obj>

Return the

Aliases: I<expand_by>

=cut

=head2 extract_by

Array.extract_by() -> I<Obj>

Return the

=cut

=head2 extract_first_by

Array.extract_first_by() -> I<Obj>

Return the

=cut

=head2 extract_last_by

Array.extract_last_by() -> I<Obj>

Return the

=cut

=head2 fetch

Array.fetch() -> I<Obj>

Return the

=cut

=head2 find

Array.find() -> I<Obj>

Return the

Aliases: I<first_by>

=cut

=head2 flat

Array.flat() -> I<Obj>

Return the

Aliases: I<flatten>

=cut

=head2 flat_map

Array.flat_map() -> I<Obj>

Return the

=cut

=head2 flip

Array.flip() -> I<Obj>

Return the

Aliases: I<reverse>

=cut

=head2 for

Array.for() -> I<Obj>

Return the

Aliases: I<each>, I<foreach>

=cut

=head2 freq

Array.freq() -> I<Obj>

Return the

=cut

=head2 freq_by

Array.freq_by() -> I<Obj>

Return the

=cut

=head2 ft

Array.ft() -> I<Obj>

Return the

Aliases: I<slice>

=cut

=head2 gauss_jordan_invert

Array.gauss_jordan_invert() -> I<Obj>

Return the

=cut

=head2 gauss_jordan_solve

Array.gauss_jordan_solve() -> I<Obj>

Return the

=cut

=head2 gcd

Array.gcd() -> I<Obj>

Return the

=cut

=head2 gcd_by

Array.gcd_by() -> I<Obj>

Return the

=cut

=head2 getopt

Array.getopt() -> I<Obj>

Return the

=cut

=head2 grep

Array.grep() -> I<Obj>

Return the

Aliases: I<select>

=cut

=head2 grep_2d

Array.grep_2d() -> I<Obj>

Return the

=cut

=head2 grep_kv

Array.grep_kv() -> I<Obj>

Return the

Aliases: I<select_kv>

=cut

=head2 group

Array.group() -> I<Obj>

Return the

Aliases: I<group_by>

=cut

=head2 head

Array.head() -> I<Obj>

Return the

Aliases: I<first>

=cut

=head2 index

Array.index() -> I<Obj>

Return the

Aliases: I<index_by>, I<first_index>, I<first_index_by>

=cut

=head2 inject

Array.inject() -> I<Obj>

Return the

Aliases: I<reduce>

=cut

=head2 insert

Array.insert() -> I<Obj>

Return the

=cut

=head2 inv

Array.inv() -> I<Obj>

Return the

Aliases: I<invert>, I<inverse>

=cut

=head2 is_empty

Array.is_empty() -> I<Obj>

Return the

=cut

=head2 item

Array.item() -> I<Obj>

Return the

=cut

=head2 items

Array.items() -> I<Obj>

Return the

=cut

=head2 iter

Array.iter() -> I<Obj>

Return the

=cut

=head2 jaro_distance

Array.jaro_distance() -> I<Obj>

Return the

=cut

=head2 join

Array.join() -> I<Obj>

Return the

=cut

=head2 join_insert

Array.join_insert() -> I<Obj>

Return the

=cut

=head2 keys

Array.keys() -> I<Obj>

Return the

Aliases: I<indices>

=cut

=head2 keys_by

Array.keys_by() -> I<Obj>

Return the

Aliases: I<indices_by>

=cut

=head2 keys_of

Array.keys_of() -> I<Obj>

Return the

Aliases: I<indices_of>

=cut

=head2 kv

Array.kv() -> I<Obj>

Return the

Aliases: I<pairs>, I<zip_indices>

=cut

=head2 last

Array.last() -> I<Obj>

Return the

Aliases: I<tail>

=cut

=head2 last_by

Array.last_by() -> I<Obj>

Return the

=cut

=head2 last_uniq

Array.last_uniq() -> I<Obj>

Return the

Aliases: I<last_unique>

=cut

=head2 last_uniq_by

Array.last_uniq_by() -> I<Obj>

Return the

Aliases: I<last_unique_by>

=cut

=head2 lcm

Array.lcm() -> I<Obj>

Return the

=cut

=head2 lcm_by

Array.lcm_by() -> I<Obj>

Return the

=cut

=head2 len

Array.len() -> I<Obj>

Return the

Aliases: I<size>, I<length>

=cut

=head2 lev

Array.lev() -> I<Obj>

Return the

Aliases: I<leven>, I<levenshtein>

=cut

=head2 madd

Array.madd() -> I<Obj>

Return the

Aliases: I<matrix_add>

=cut

=head2 make

Array.make() -> I<Obj>

Return the

=cut

=head2 make_by

Array.make_by() -> I<Obj>

Return the

=cut

=head2 map

Array.map() -> I<Obj>

Return the

Aliases: I<collect>

=cut

=head2 map_2d

Array.map_2d() -> I<Obj>

Return the

=cut

=head2 map_cons

Array.map_cons() -> I<Obj>

Return the

=cut

=head2 map_kv

Array.map_kv() -> I<Obj>

Return the

Aliases: I<collect_kv>

=cut

=head2 map_op

Array.map_op() -> I<Obj>

Return the

Aliases: I<map_operator>

=cut

=head2 map_reduce

Array.map_reduce() -> I<Obj>

Return the

Aliases: I<reduce_map>

=cut

=head2 map_slice

Array.map_slice() -> I<Obj>

Return the

=cut

=head2 match

Array.match() -> I<Obj>

Return the

=cut

=head2 max

Array.max() -> I<Obj>

Return the

=cut

=head2 max_by

Array.max_by() -> I<Obj>

Return the

=cut

=head2 mdiv

Array.mdiv() -> I<Obj>

Return the

Aliases: I<matrix_div>

=cut

=head2 min

Array.min() -> I<Obj>

Return the

=cut

=head2 min_by

Array.min_by() -> I<Obj>

Return the

=cut

=head2 minmax

Array.minmax() -> I<Obj>

Return the

=cut

=head2 mmul

Array.mmul() -> I<Obj>

Return the

Aliases: I<matrix_mul>

=cut

=head2 msolve

Array.msolve() -> I<Obj>

Return the

Aliases: I<matrix_solve>

=cut

=head2 msub

Array.msub() -> I<Obj>

Return the

Aliases: I<matrix_sub>

=cut

=head2 new

Array.new() -> I<Obj>

Return the

Aliases: I<call>

=cut

=head2 next_permutation

Array.next_permutation() -> I<Obj>

Return the

=cut

=head2 none

Array.none() -> I<Obj>

Return the

=cut

=head2 nth_perm

Array.nth_perm() -> I<Obj>

Return the

Aliases: I<nth_permutation>

=cut

=head2 pack

Array.pack() -> I<Obj>

Return the

=cut

=head2 pair_map

Array.pair_map() -> I<Obj>

Return the

Aliases: I<pairmap>

=cut

=head2 pam_op

Array.pam_op() -> I<Obj>

Return the

Aliases: I<pam_operator>

=cut

=head2 part

Array.part() -> I<Obj>

Return the

Aliases: I<partition>

=cut

=head2 partitions

Array.partitions() -> I<Obj>

Return the

=cut

=head2 perm2num

Array.perm2num() -> I<Obj>

Return the

=cut

=head2 permutations

Array.permutations() -> I<Obj>

Return the

=cut

=head2 pick

Array.pick() -> I<Obj>

Return the

=cut

=head2 pop_at

Array.pop_at() -> I<Obj>

Return the

Aliases: I<delete_at>, I<delete_index>

=cut

=head2 pop_rand

Array.pop_rand() -> I<Obj>

Return the

=cut

=head2 pop_while

Array.pop_while() -> I<Obj>

Return the

=cut

=head2 prepend

Array.prepend() -> I<Obj>

Return the

Aliases: I<unshift>

=cut

=head2 prod

Array.prod() -> I<Obj>

Return the

=cut

=head2 prod_2d

Array.prod_2d() -> I<Obj>

Return the

=cut

=head2 prod_by

Array.prod_by() -> I<Obj>

Return the

=cut

=head2 prod_kv

Array.prod_kv() -> I<Obj>

Return the

=cut

=head2 rand

Array.rand() -> I<Obj>

Return the

Aliases: I<sample>

=cut

=head2 range

Array.range() -> I<Obj>

Return the

=cut

=head2 recmap

Array.recmap() -> I<Obj>

Return the

=cut

=head2 reduce_op

Array.reduce_op() -> I<Obj>

Return the

Aliases: I<reduce_operator>

=cut

=head2 resize

Array.resize() -> I<Obj>

Return the

Aliases: I<resize_to>

=cut

=head2 rindex

Array.rindex() -> I<Obj>

Return the

Aliases: I<rindex_by>, I<last_index>, I<last_index_by>

=cut

=head2 rotate

Array.rotate() -> I<Obj>

Return the

=cut

=head2 rref

Array.rref() -> I<Obj>

Return the

Aliases: I<reduced_row_echelon_form>

=cut

=head2 rscalar_op

Array.rscalar_op() -> I<Obj>

Return the

Aliases: I<rscalar_operator>

=cut

=head2 run_length

Array.run_length() -> I<Obj>

Return the

Aliases: I<run_length_by>

=cut

=head2 sadd

Array.sadd() -> I<Obj>

Return the

Aliases: I<scalar_add>

=cut

=head2 scalar_op

Array.scalar_op() -> I<Obj>

Return the

Aliases: I<scalar_operator>

=cut

=head2 sdiv

Array.sdiv() -> I<Obj>

Return the

Aliases: I<scalar_div>

=cut

=head2 segment

Array.segment() -> I<Obj>

Return the

=cut

=head2 segment_by

Array.segment_by() -> I<Obj>

Return the

=cut

=head2 shift

Array.shift() -> I<Obj>

Return the

Aliases: I<drop_left>, I<drop_first>

=cut

=head2 shift_while

Array.shift_while() -> I<Obj>

Return the

=cut

=head2 shuffle

Array.shuffle() -> I<Obj>

Return the

=cut

=head2 slice_after

Array.slice_after() -> I<Obj>

Return the

=cut

=head2 slice_before

Array.slice_before() -> I<Obj>

Return the

=cut

=head2 slices

Array.slices() -> I<Obj>

Return the

=cut

=head2 smul

Array.smul() -> I<Obj>

Return the

Aliases: I<scalar_mul>

=cut

=head2 sort

Array.sort() -> I<Obj>

Return the

=cut

=head2 sort_by

Array.sort_by() -> I<Obj>

Return the

=cut

=head2 splice

Array.splice() -> I<Obj>

Return the

=cut

=head2 split

Array.split() -> I<Obj>

Return the

=cut

=head2 split_by

Array.split_by() -> I<Obj>

Return the

=cut

=head2 ssub

Array.ssub() -> I<Obj>

Return the

Aliases: I<scalar_sub>

=cut

=head2 stack

Array.stack() -> I<Obj>

Return the

Aliases: I<stack_by>

=cut

=head2 subsets

Array.subsets() -> I<Obj>

Return the

=cut

=head2 sum

Array.sum() -> I<Obj>

Return the

=cut

=head2 sum_2d

Array.sum_2d() -> I<Obj>

Return the

=cut

=head2 sum_by

Array.sum_by() -> I<Obj>

Return the

=cut

=head2 sum_kv

Array.sum_kv() -> I<Obj>

Return the

=cut

=head2 swap

Array.swap() -> I<Obj>

Return the

=cut

=head2 take_left

Array.take_left() -> I<Obj>

Return the

=cut

=head2 take_right

Array.take_right() -> I<Obj>

Return the

=cut

=head2 to_a

Array.to_a() -> I<Obj>

Return the

Aliases: I<to_array>

=cut

=head2 to_bag

Array.to_bag() -> I<Obj>

Return the

=cut

=head2 to_h

Array.to_h() -> I<Obj>

Return the

Aliases: I<to_hash>

=cut

=head2 to_m

Array.to_m() -> I<Obj>

Return the

Aliases: I<to_matrix>

=cut

=head2 to_s

Array.to_s() -> I<Obj>

Return the

Aliases: I<dump>, I<to_str>

=cut

=head2 to_set

Array.to_set() -> I<Obj>

Return the

=cut

=head2 to_v

Array.to_v() -> I<Obj>

Return the

Aliases: I<to_vector>

=cut

=head2 tuples

Array.tuples() -> I<Obj>

Return the

Aliases: I<variations>

=cut

=head2 tuples_with_repetition

Array.tuples_with_repetition() -> I<Obj>

Return the

Aliases: I<variations_with_repetition>

=cut

=head2 uniq

Array.uniq() -> I<Obj>

Return the

Aliases: I<unique>, I<distinct>

=cut

=head2 uniq_by

Array.uniq_by() -> I<Obj>

Return the

Aliases: I<unique_by>

=cut

=head2 uniq_permutations

Array.uniq_permutations() -> I<Obj>

Return the

Aliases: I<unique_permutations>

=cut

=head2 uniq_prefs

Array.uniq_prefs() -> I<Obj>

Return the

Aliases: I<unique_prefixes>

=cut

=head2 unroll_op

Array.unroll_op() -> I<Obj>

Return the

Aliases: I<unroll_operator>

=cut

=head2 unzip_by

Array.unzip_by() -> I<Obj>

Return the

=cut

=head2 weighted_shuffle_by

Array.weighted_shuffle_by() -> I<Obj>

Return the

=cut

=head2 wise_op

Array.wise_op() -> I<Obj>

Return the

Aliases: I<wise_operator>

=cut

=head2 zip

Array.zip() -> I<Obj>

Return the

Aliases: I<transpose>

=cut

=head2 zip_by

Array.zip_by() -> I<Obj>

Return the

=cut

=head2 zip_op

Array.zip_op() -> I<Obj>

Return the

Aliases: I<zip_operator>

=cut
