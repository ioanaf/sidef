
=encoding utf8

=head1 NAME

Sidef::Types::String::String

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = String(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Object::Object

=head1 METHODS

=head2 %

    I<Obj> B<%> I<Obj>

Return the

Aliases: I<sprintf>

=cut

=head2 &

    I<Obj> B<&> I<Obj>

Return the

Aliases: I<and>

=cut

=head2 *

    I<Obj> B<*> I<Obj>

Return the

Aliases: I<mul>

=cut

=head2 +

    I<Obj> B<+> I<Obj>

Return the

Aliases: I<add>, I<append>, I<concat>

=cut

=head2 ++

    I<Obj> B<++> I<Obj>

Return the

Aliases: I<inc>

=cut

=head2 -

    I<Obj> B<-> I<Obj>

Return the

Aliases: I<diff>

=cut

=head2 ..

    I<Obj> B<..> I<Obj>

Return the

Aliases: I<to>, I<upto>

=cut

=head2 /

    I<Obj> B</> I<Obj>

Return the

Aliases: I<÷>, I<div>

=cut

=head2 <

    I<Obj> B<E<lt>> I<Obj>

Return the

Aliases: I<lt>

=cut

=head2 <<

    I<Obj> B<E<lt>E<lt>> I<Obj>

Return the

Aliases: I<drop_left>, I<shift_left>

=cut

=head2 <=>

    I<Obj> B<E<lt>=E<gt>> I<Obj>

Return the

Aliases: I<cmp>

=cut

=head2 ==

    I<Obj> B<==> I<Obj>

Return the

Aliases: I<eq>

=cut

=head2 =~

    I<Obj> B<=~> I<Obj>

Return the

Aliases: I<match>

=cut

=head2 >

    I<Obj> B<E<gt>> I<Obj>

Return the

Aliases: I<gt>

=cut

=head2 >>

    I<Obj> B<E<gt>E<gt>> I<Obj>

Return the

Aliases: I<drop_right>, I<shift_right>

=cut

=head2 ^

    I<Obj> B<^> I<Obj>

Return the

Aliases: I<xor>

=cut

=head2 |

    I<Obj> B<|> I<Obj>

Return the

Aliases: I<or>

=cut

=head2 ~

    I<Obj> B<~> I<Obj>

Return the

Aliases: I<not>

=cut

=head2 ≠

    I<Obj> B<≠> I<Obj>

Return the

Aliases: I<!=>, I<ne>

=cut

=head2 ≤

    I<Obj> B<≤> I<Obj>

Return the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

    I<Obj> B<≥> I<Obj>

Return the

Aliases: I<E<gt>=>, I<ge>

=cut

=head2 apply_escapes

    String.apply_escapes()

Return the

=cut

=head2 backtick

    String.backtick()

Return the

=cut

=head2 base64_decode

    String.base64_decode()

Return the

Aliases: I<decode_base64>

=cut

=head2 base64_encode

    String.base64_encode()

Return the

Aliases: I<encode_base64>

=cut

=head2 begins_with

    String.begins_with()

Return the

Aliases: I<starts_with>

=cut

=head2 bin

    String.bin()

Return the

=cut

=head2 bytes

    String.bytes()

Return the

=cut

=head2 bytes_len

    String.bytes_len()

Return the

Aliases: I<bytes_length>

=cut

=head2 center

    String.center()

Return the

=cut

=head2 char

    String.char()

Return the

Aliases: I<char_at>

=cut

=head2 chars

    String.chars()

Return the

=cut

=head2 chomp

    String.chomp()

Return the

=cut

=head2 chop

    String.chop()

Return the

=cut

=head2 clear

    String.clear()

Return the

=cut

=head2 collect

    String.collect()

Return the

Aliases: I<find_all>, I<findall>

=cut

=head2 count

    String.count()

Return the

=cut

=head2 crypt

    String.crypt()

Return the

=cut

=head2 decode

    String.decode()

Return the

=cut

=head2 decode_utf8

    String.decode_utf8()

Return the

=cut

=head2 die

    String.die()

Return the

=cut

=head2 digits

    String.digits()

Return the

=cut

=head2 downto

    String.downto()

Return the

=cut

=head2 dump

    String.dump()

Return the

Aliases: I<inspect>

=cut

=head2 each

    String.each()

Return the

Aliases: I<each_char>

=cut

=head2 each_byte

    String.each_byte()

Return the

=cut

=head2 each_graph

    String.each_graph()

Return the

Aliases: I<each_grapheme>

=cut

=head2 each_line

    String.each_line()

Return the

=cut

=head2 each_num

    String.each_num()

Return the

Aliases: I<each_number>

=cut

=head2 each_word

    String.each_word()

Return the

=cut

=head2 encode

    String.encode()

Return the

=cut

=head2 encode_utf8

    String.encode_utf8()

Return the

=cut

=head2 ends_with

    String.ends_with()

Return the

=cut

=head2 escape

    String.escape()

Return the

Aliases: I<quotemeta>

=cut

=head2 esub

    String.esub()

Return the

=cut

=head2 extract_bracketed

    String.extract_bracketed()

Return the

=cut

=head2 extract_codeblock

    String.extract_codeblock()

Return the

=cut

=head2 extract_delimited

    String.extract_delimited()

Return the

=cut

=head2 extract_quotelike

    String.extract_quotelike()

Return the

=cut

=head2 extract_tagged

    String.extract_tagged()

Return the

=cut

=head2 fc

    String.fc()

Return the

Aliases: I<foldcase>

=cut

=head2 first

    String.first()

Return the

=cut

=head2 flip

    String.flip()

Return the

Aliases: I<reverse>

=cut

=head2 format

    String.format()

Return the

=cut

=head2 frequire

    String.frequire()

Return the

=cut

=head2 ft

    String.ft()

Return the

Aliases: I<slice>

=cut

=head2 gesub

    String.gesub()

Return the

=cut

=head2 glob

    String.glob()

Return the

=cut

=head2 gmatch

    String.gmatch()

Return the

=cut

=head2 graphs

    String.graphs()

Return the

Aliases: I<graphemes>

=cut

=head2 graphs_len

    String.graphs_len()

Return the

Aliases: I<graphs_length>

=cut

=head2 gsub

    String.gsub()

Return the

Aliases: I<replace_all>

=cut

=head2 has

    String.has()

Return the

Aliases: I<contain>, I<include>, I<contains>, I<includes>

=cut

=head2 hex

    String.hex()

Return the

=cut

=head2 index

    String.index()

Return the

=cut

=head2 insert

    String.insert()

Return the

=cut

=head2 ints

    String.ints()

Return the

Aliases: I<integers>

=cut

=head2 is_alnum

    String.is_alnum()

Return the

Aliases: I<is_alphanum>

=cut

=head2 is_alpha

    String.is_alpha()

Return the

=cut

=head2 is_ascii

    String.is_ascii()

Return the

=cut

=head2 is_digit

    String.is_digit()

Return the

=cut

=head2 is_empty

    String.is_empty()

Return the

=cut

=head2 is_lc

    String.is_lc()

Return the

Aliases: I<is_lowercase>

=cut

=head2 is_numeric

    String.is_numeric()

Return the

Aliases: I<looks_like_number>

=cut

=head2 is_palindrome

    String.is_palindrome()

Return the

=cut

=head2 is_punct

    String.is_punct()

Return the

Aliases: I<is_punctuation>

=cut

=head2 is_space

    String.is_space()

Return the

=cut

=head2 is_uc

    String.is_uc()

Return the

Aliases: I<is_uppercase>

=cut

=head2 is_word

    String.is_word()

Return the

=cut

=head2 iter

    String.iter()

Return the

=cut

=head2 jaro_distance

    String.jaro_distance()

Return the

=cut

=head2 join

    String.join()

Return the

=cut

=head2 last

    String.last()

Return the

=cut

=head2 lc

    String.lc()

Return the

Aliases: I<lower>, I<downcase>

=cut

=head2 lcfirst

    String.lcfirst()

Return the

=cut

=head2 len

    String.len()

Return the

Aliases: I<size>, I<length>, I<chars_len>, I<chars_length>

=cut

=head2 lev

    String.lev()

Return the

Aliases: I<leven>, I<levenshtein>

=cut

=head2 lines

    String.lines()

Return the

=cut

=head2 ltrim

    String.ltrim()

Return the

Aliases: I<lstrip>, I<trim_beg>, I<strip_beg>, I<trim_left>, I<strip_left>

=cut

=head2 md5

    String.md5()

Return the

=cut

=head2 new

    String.new()

Return the

Aliases: I<call>

=cut

=head2 num

    String.num()

Return the

Aliases: I<to_n>, I<to_num>

=cut

=head2 nums

    String.nums()

Return the

Aliases: I<numbers>

=cut

=head2 oct

    String.oct()

Return the

=cut

=head2 open

    String.open()

Return the

=cut

=head2 open_r

    String.open_r()

Return the

=cut

=head2 ord

    String.ord()

Return the

=cut

=head2 overlaps

    String.overlaps()

Return the

=cut

=head2 pack

    String.pack()

Return the

=cut

=head2 parse_quotewords

    String.parse_quotewords()

Return the

=cut

=head2 pipe

    String.pipe()

Return the

=cut

=head2 pop

    String.pop()

Return the

=cut

=head2 prepend

    String.prepend()

Return the

=cut

=head2 printf

    String.printf()

Return the

=cut

=head2 printlnf

    String.printlnf()

Return the

=cut

=head2 range

    String.range()

Return the

=cut

=head2 repeat

    String.repeat()

Return the

=cut

=head2 require

    String.require()

Return the

=cut

=head2 rindex

    String.rindex()

Return the

=cut

=head2 rotate

    String.rotate()

Return the

=cut

=head2 rtrim

    String.rtrim()

Return the

Aliases: I<rstrip>, I<trim_end>, I<strip_end>, I<trim_right>, I<strip_right>

=cut

=head2 run

    String.run()

Return the

=cut

=head2 scan

    String.scan()

Return the

=cut

=head2 sha1

    String.sha1()

Return the

=cut

=head2 sha256

    String.sha256()

Return the

=cut

=head2 sha512

    String.sha512()

Return the

=cut

=head2 sort

    String.sort()

Return the

=cut

=head2 split

    String.split()

Return the

=cut

=head2 sprintlnf

    String.sprintlnf()

Return the

=cut

=head2 sub

    String.sub()

Return the

Aliases: I<replace>

=cut

=head2 substr

    String.substr()

Return the

Aliases: I<substring>

=cut

=head2 tc

    String.tc()

Return the

Aliases: I<ucfirst>, I<titlecase>

=cut

=head2 tclc

    String.tclc()

Return the

Aliases: I<capitalize>

=cut

=head2 to_i

    String.to_i()

Return the

Aliases: I<to_int>

=cut

=head2 to_s

    String.to_s()

Return the

Aliases: I<to_str>

=cut

=head2 tr

    String.tr()

Return the

Aliases: I<translit>

=cut

=head2 trans

    String.trans()

Return the

=cut

=head2 trim

    String.trim()

Return the

Aliases: I<strip>

=cut

=head2 uc

    String.uc()

Return the

Aliases: I<upper>, I<upcase>

=cut

=head2 unescape

    String.unescape()

Return the

=cut

=head2 unpack

    String.unpack()

Return the

=cut

=head2 warn

    String.warn()

Return the

=cut

=head2 wc

    String.wc()

Return the

Aliases: I<wordcase>

=cut

=head2 words

    String.words()

Return the

=cut
