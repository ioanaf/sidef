
=encoding utf8

=head1 NAME

Sidef::Types::Hash::Hash

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Hash(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Object::Object

=head1 METHODS

=head2 &

    a & b

Return the

Aliases: I<and>, I<intersection>

=cut

=head2 +

    a + b

Return the

Aliases: I<merge>, I<concat>

=cut

=head2 -

    a - b

Return the

Aliases: I<sub>, I<diff>, I<difference>

=cut

=head2 ...

    a ... b

Return the

Aliases: I<to_list>

=cut

=head2 ==

    a == b

Return the

Aliases: I<eq>

=cut

=head2 ^

    a ^ b

Return the

Aliases: I<xor>, I<symdiff>, I<symmetric_difference>

=cut

=head2 |

    a | b

Return the

Aliases: I<or>, I<union>

=cut

=head2 ≠

    a ≠ b

Return the

Aliases: I<!=>, I<ne>

=cut

=head2 append

    Hash.append()

Return the

=cut

=head2 as_tree

    Hash.as_tree()

Return the

=cut

=head2 clear

    Hash.clear()

Return the

=cut

=head2 collect

    Hash.collect()

Return the

Aliases: I<collect_kv>

=cut

=head2 count

    Hash.count()

Return the

=cut

=head2 count_by

    Hash.count_by()

Return the

=cut

=head2 delete

    Hash.delete()

Return the

Aliases: I<remove>

=cut

=head2 delete_if

    Hash.delete_if()

Return the

=cut

=head2 dig

    Hash.dig()

Return the

=cut

=head2 each

    Hash.each()

Return the

Aliases: I<each_kv>, I<each_pair>

=cut

=head2 each_k

    Hash.each_k()

Return the

Aliases: I<each_key>

=cut

=head2 each_v

    Hash.each_v()

Return the

Aliases: I<each_value>

=cut

=head2 fetch

    Hash.fetch()

Return the

=cut

=head2 flip

    Hash.flip()

Return the

Aliases: I<invert>, I<reverse>

=cut

=head2 get_pair

    Hash.get_pair()

Return the

=cut

=head2 get_pairs

    Hash.get_pairs()

Return the

=cut

=head2 grep

    Hash.grep()

Return the

Aliases: I<grep_kv>, I<select>

=cut

=head2 grep_v

    Hash.grep_v()

Return the

Aliases: I<grep_val>

=cut

=head2 has

    Hash.has()

Return the

Aliases: I<exists>, I<has_key>, I<haskey>, I<contain>, I<include>, I<contains>, I<includes>

=cut

=head2 is_empty

    Hash.is_empty()

Return the

=cut

=head2 item

    Hash.item()

Return the

=cut

=head2 items

    Hash.items()

Return the

=cut

=head2 keys

    Hash.keys()

Return the

=cut

=head2 kv

    Hash.kv()

Return the

Aliases: I<to_a>, I<pairs>, I<to_array>

=cut

=head2 len

    Hash.len()

Return the

Aliases: I<size>, I<length>

=cut

=head2 lsel

    Hash.lsel()

Return the

Aliases: I<linsel>, I<linear_selection>

=cut

=head2 map

    Hash.map()

Return the

Aliases: I<map_kv>

=cut

=head2 map_v

    Hash.map_v()

Return the

Aliases: I<map_val>

=cut

=head2 max_by

    Hash.max_by()

Return the

=cut

=head2 merge_values

    Hash.merge_values()

Return the

=cut

=head2 min_by

    Hash.min_by()

Return the

=cut

=head2 new

    Hash.new()

Return the

Aliases: I<call>

=cut

=head2 same_keys

    Hash.same_keys()

Return the

=cut

=head2 set_keys

    Hash.set_keys()

Return the

=cut

=head2 slice

    Hash.slice()

Return the

=cut

=head2 sort

    Hash.sort()

Return the

=cut

=head2 sort_by

    Hash.sort_by()

Return the

=cut

=head2 to_bag

    Hash.to_bag()

Return the

=cut

=head2 to_s

    Hash.to_s()

Return the

Aliases: I<dump>, I<to_str>

=cut

=head2 to_set

    Hash.to_set()

Return the

=cut

=head2 values

    Hash.values()

Return the

=cut
