
=encoding utf8

=head1 NAME

Sidef::Types::Number::Mod

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Mod(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Types::Number::Number

=head1 METHODS

=head2 !

I<Obj> B<!> I<Obj> -> I<Obj>

Return the

Aliases: I<factorial>

=cut

=head2 !=

I<Obj> B<!=> I<Obj> -> I<Obj>

Return the

Aliases: I<ne>

=cut

=head2 &

I<Obj> B<&> I<Obj> -> I<Obj>

Return the

Aliases: I<and>

=cut

=head2 *

I<Obj> B<*> I<Obj> -> I<Obj>

Return the

Aliases: I<mul>

=cut

=head2 **

I<Obj> B<**> I<Obj> -> I<Obj>

Return the

Aliases: I<pow>

=cut

=head2 +

I<Obj> B<+> I<Obj> -> I<Obj>

Return the

Aliases: I<add>

=cut

=head2 ++

I<Obj> B<++> I<Obj> -> I<Obj>

Return the

Aliases: I<inc>

=cut

=head2 -

I<Obj> B<-> I<Obj> -> I<Obj>

Return the

Aliases: I<sub>

=cut

=head2 --

I<Obj> B<--> I<Obj> -> I<Obj>

Return the

Aliases: I<dec>

=cut

=head2 /

I<Obj> B</> I<Obj> -> I<Obj>

Return the

Aliases: I<÷>, I<div>

=cut

=head2 <

I<Obj> B<E<lt>> I<Obj> -> I<Obj>

Return the

Aliases: I<lt>

=cut

=head2 <=>

I<Obj> B<E<lt>=E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<cmp>

=cut

=head2 ==

I<Obj> B<==> I<Obj> -> I<Obj>

Return the

Aliases: I<eq>

=cut

=head2 >

I<Obj> B<E<gt>> I<Obj> -> I<Obj>

Return the

Aliases: I<gt>

=cut

=head2 ^

I<Obj> B<^> I<Obj> -> I<Obj>

Return the

Aliases: I<xor>

=cut

=head2 |

I<Obj> B<|> I<Obj> -> I<Obj>

Return the

Aliases: I<or>

=cut

=head2 ≤

I<Obj> B<≤> I<Obj> -> I<Obj>

Return the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

I<Obj> B<≥> I<Obj> -> I<Obj>

Return the

Aliases: I<E<gt>=>, I<ge>

=cut

=head2 chinese

Mod.chinese() -> I<Obj>

Return the

=cut

=head2 fib

Mod.fib() -> I<Obj>

Return the

Aliases: I<fibonacci>

=cut

=head2 inv

Mod.inv() -> I<Obj>

Return the

=cut

=head2 lucas

Mod.lucas() -> I<Obj>

Return the

=cut

=head2 lucas_U

Mod.lucas_U() -> I<Obj>

Return the

Aliases: I<lucasu>, I<lucasU>

=cut

=head2 lucas_V

Mod.lucas_V() -> I<Obj>

Return the

Aliases: I<lucasv>, I<lucasV>

=cut

=head2 modulus

Mod.modulus() -> I<Obj>

Return the

=cut

=head2 new

Mod.new() -> I<Obj>

Return the

Aliases: I<call>

=cut

=head2 sqrt

Mod.sqrt() -> I<Obj>

Return the

=cut

=head2 to_n

Mod.to_n() -> I<Obj>

Return the

Aliases: I<lift>

=cut

=head2 to_s

Mod.to_s() -> I<Obj>

Return the

Aliases: I<dump>

=cut
