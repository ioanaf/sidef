
=encoding utf8

=head1 NAME

Sidef::Types::Range::Range

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Range(...)

=head1 METHODS

=head2 *

I<Obj> B<*> I<Obj> -> I<Obj>

Return the

Aliases: I<mul>

=cut

=head2 +

I<Obj> B<+> I<Obj> -> I<Obj>

Return the

Aliases: I<add>

=cut

=head2 -

I<Obj> B<-> I<Obj> -> I<Obj>

Return the

Aliases: I<sub>

=cut

=head2 ...

I<Obj> B<...> I<Obj> -> I<Obj>

Return the

Aliases: I<to_list>

=cut

=head2 /

I<Obj> B</> I<Obj> -> I<Obj>

Return the

Aliases: I<÷>, I<div>

=cut

=head2 ==

I<Obj> B<==> I<Obj> -> I<Obj>

Return the

Aliases: I<eq>

=cut

=head2 ≠

I<Obj> B<≠> I<Obj> -> I<Obj>

Return the

Aliases: I<!=>, I<ne>

=cut

=head2 accumulate

Range.accumulate() -> I<Obj>

Return the

=cut

=head2 accumulate_by

Range.accumulate_by() -> I<Obj>

Return the

=cut

=head2 all

Range.all() -> I<Obj>

Return the

=cut

=head2 any

Range.any() -> I<Obj>

Return the

=cut

=head2 bounds

Range.bounds() -> I<Obj>

Return the

=cut

=head2 by

Range.by() -> I<Obj>

Return the

=cut

=head2 cons

Range.cons() -> I<Obj>

Return the

Aliases: I<map_cons>

=cut

=head2 contain

Range.contain() -> I<Obj>

Return the

Aliases: I<include>, I<contains>, I<includes>

=cut

=head2 count

Range.count() -> I<Obj>

Return the

=cut

=head2 count_by

Range.count_by() -> I<Obj>

Return the

=cut

=head2 cross_operator

Range.cross_operator() -> I<Obj>

Return the

=cut

=head2 each_cons

Range.each_cons() -> I<Obj>

Return the

=cut

=head2 each_slice

Range.each_slice() -> I<Obj>

Return the

=cut

=head2 first_by

Range.first_by() -> I<Obj>

Return the

=cut

=head2 flip

Range.flip() -> I<Obj>

Return the

Aliases: I<reverse>

=cut

=head2 for

Range.for() -> I<Obj>

Return the

Aliases: I<each>, I<foreach>

=cut

=head2 from

Range.from() -> I<Obj>

Return the

=cut

=head2 grep

Range.grep() -> I<Obj>

Return the

Aliases: I<select>

=cut

=head2 head

Range.head() -> I<Obj>

Return the

Aliases: I<first>

=cut

=head2 join

Range.join() -> I<Obj>

Return the

=cut

=head2 kv

Range.kv() -> I<Obj>

Return the

Aliases: I<pairs>, I<zip_indices>

=cut

=head2 last

Range.last() -> I<Obj>

Return the

Aliases: I<tail>

=cut

=head2 last_by

Range.last_by() -> I<Obj>

Return the

=cut

=head2 len

Range.len() -> I<Obj>

Return the

Aliases: I<length>

=cut

=head2 map

Range.map() -> I<Obj>

Return the

=cut

=head2 map_operator

Range.map_operator() -> I<Obj>

Return the

=cut

=head2 max

Range.max() -> I<Obj>

Return the

=cut

=head2 max_by

Range.max_by() -> I<Obj>

Return the

=cut

=head2 min

Range.min() -> I<Obj>

Return the

=cut

=head2 min_by

Range.min_by() -> I<Obj>

Return the

=cut

=head2 new

Range.new() -> I<Obj>

Return the

Aliases: I<call>

=cut

=head2 none

Range.none() -> I<Obj>

Return the

=cut

=head2 pam_operator

Range.pam_operator() -> I<Obj>

Return the

=cut

=head2 pick

Range.pick() -> I<Obj>

Return the

=cut

=head2 rand

Range.rand() -> I<Obj>

Return the

Aliases: I<sample>

=cut

=head2 reduce

Range.reduce() -> I<Obj>

Return the

=cut

=head2 reduce_operator

Range.reduce_operator() -> I<Obj>

Return the

=cut

=head2 shuffle

Range.shuffle() -> I<Obj>

Return the

=cut

=head2 slices

Range.slices() -> I<Obj>

Return the

Aliases: I<map_slice>

=cut

=head2 step

Range.step() -> I<Obj>

Return the

=cut

=head2 to

Range.to() -> I<Obj>

Return the

=cut

=head2 to_a

Range.to_a() -> I<Obj>

Return the

Aliases: I<to_array>

=cut

=head2 to_v

Range.to_v() -> I<Obj>

Return the

Aliases: I<to_vec>, I<to_vector>

=cut

=head2 unroll_operator

Range.unroll_operator() -> I<Obj>

Return the

=cut

=head2 zip_operator

Range.zip_operator() -> I<Obj>

Return the

=cut
